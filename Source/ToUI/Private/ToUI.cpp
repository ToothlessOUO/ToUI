#include "ToUI.h"
#include "Styling/SlateStyleMacros.h"
#include "Interfaces/IPluginManager.h"
#include "ToUIEditorStyleSetting.h"
#include "Settings/EditorStyleSettings.h"

DEFINE_LOG_CATEGORY(LogToUI);

#define LOCTEXT_NAMESPACE "FToUIModule"
#define RootToContentDir Style->RootToContentDir

void FToUIModule::StartupModule()
{
	TickDelegate = FTickerDelegate::CreateRaw(this, &FToUIModule::Tick);

	if (GIsEditor && !IsRunningCommandlet())
	{
		ApplyFlatNodeEditorStyle();
		ApplyMatrixBackgroundEditorStyle();
	}
}

void FToUIModule::ShutdownModule()
{
}

UToUIEditorStyleSetting* FToUIModule::GetEditorSettings()
{
	return GetMutableDefault<UToUIEditorStyleSetting>();
}

#pragma region FlatNode

FSlateBrush* FToUIModule::CreateHeaderBrush()
{
	FSlateBrush* SlateBrush = new FSlateBrush();

	UMaterial* Material = LoadObject<UMaterial>(nullptr, *Path_FlatNodeHeaderMat);
	UToUIEditorStyleSetting* FlatNodesSettings = GetEditorSettings();
	UMaterialInstanceDynamic* DynamicMaterial = UMaterialInstanceDynamic::Create(Material, FlatNodesSettings);

	//DynamicMaterial->SetVectorParameterValue("Color", FVector(HeaderBrightness, HeaderBrightness, HeaderBrightness));
	DynamicMaterial->AddToRoot();

	SlateBrush->SetResourceObject(DynamicMaterial);
	SlateBrushes.Add("HeaderBrush", SlateBrush);

	return SlateBrush;
}

void FToUIModule::ApplyFlatNodeEditorStyle()
{
	FSlateStyleSet* Style = (FSlateStyleSet*)&FAppStyle::Get();
	Style->SetContentRoot(IPluginManager::Get().FindPlugin("ToUI")->GetBaseDir() / TEXT("Resources"));

	UToUIEditorStyleSetting* FlatNodesSettings = GetMutableDefault<UToUIEditorStyleSetting>();
	//const bool bHeaderUseGradient = FlatNodesSettings->bHeaderUseGradient;

	Style->Set("Graph.PlayInEditor", new BOX_BRUSH("Graph/RegularNode_shadow_selected", FMargin(18.0f / 64.0f)));

	Style->Set("Graph.Node.Body", new BOX_BRUSH("Graph/RegularNode_body", FMargin(16.f / 64.f, 25.f / 64.f, 16.f / 64.f, 16.f / 64.f)));
	Style->Set("Graph.Node.TintedBody", new BOX_BRUSH("Graph/TintedNode_body", FMargin(16.f / 64.f, 25.f / 64.f, 16.f / 64.f, 16.f / 64.f)));
	Style->Set("Graph.Node.TitleGloss", new BOX_BRUSH("Graph/RegularNode_title_gloss", FMargin(12.0f / 64.0f)));
	FSlateBrush* HeaderBrush = CreateHeaderBrush();
	HeaderBrush->Margin = FMargin(0, -1.0f / 32.0f, -3.0f / 20.0f, 0);
	HeaderBrush->DrawAs = ESlateBrushDrawType::Box;
	Style->Set("Graph.Node.ColorSpill", HeaderBrush);

	Style->Set("Graph.Node.TitleHighlight", new BOX_BRUSH("Graph/RegularNode_title_highlight", FMargin(16.0f / 64.0f, 1.0f, 16.0f / 64.0f, 0.0f)));

	Style->Set("Graph.Node.ShadowSize", FVector2D(12, 12));
	Style->Set("Graph.Node.ShadowSelected", new BOX_BRUSH("Graph/RegularNode_shadow_selected", FMargin(18.0f / 64.0f)));
	Style->Set("Graph.Node.Shadow", new BOX_BRUSH("Graph/RegularNode_shadow", FMargin(18.0f / 64.0f)));

	Style->Set("Graph.VarNode.Body", new BOX_BRUSH("Graph/VarNode_body", FMargin(16.f / 64.f, 12.f / 28.f)));
	Style->Set("Graph.VarNode.ColorSpill", new IMAGE_BRUSH("Graph/VarNode_color_spill", FVector2D(132, 28)));
	Style->Set("Graph.VarNode.Gloss", new BOX_BRUSH("Graph/VarNode_gloss", FMargin(16.f / 64.f, 16.f / 28.f, 16.f / 64.f, 4.f / 28.f)));

	Style->Set("Graph.VarNode.ShadowSelected", new BOX_BRUSH("Graph/VarNode_shadow_selected", FMargin(26.0f / 64.0f)));
	Style->Set("Graph.VarNode.Shadow", new BOX_BRUSH("Graph/VarNode_shadow", FMargin(26.0f / 64.0f)));

	Style->Set("Graph.CollapsedNode.Body", new BOX_BRUSH("Graph/RegularNode_body", FMargin(16.f / 64.f, 25.f / 64.f, 16.f / 64.f, 16.f / 64.f)));
	Style->Set("Graph.CollapsedNode.BodyColorSpill", new BOX_BRUSH("Graph/CollapsedNode_Body_ColorSpill", FMargin(16.f / 64.f, 25.f / 64.f, 16.f / 64.f, 16.f / 64.f)));

	Style->Set("Graph.ExecPin.Connected", new IMAGE_BRUSH("Old/Graph/ExecPin_Connected", FVector2D(12.0f, 16.0f)));
	Style->Set("Graph.ExecPin.Disconnected", new IMAGE_BRUSH("Old/Graph/ExecPin_Disconnected", FVector2D(12.0f, 16.0f)));
	Style->Set("Graph.ExecPin.ConnectedHovered", new IMAGE_BRUSH("Old/Graph/ExecPin_Connected", FVector2D(12.0f, 16.0f), FLinearColor(0.8f, 0.8f, 0.8f)));
	Style->Set("Graph.ExecPin.DisconnectedHovered", new IMAGE_BRUSH("Old/Graph/ExecPin_Disconnected", FVector2D(12.0f, 16.0f), FLinearColor(0.8f, 0.8f, 0.8f)));

	Style->Set("KismetExpression.ReadVariable.Body", new BOX_BRUSH("/Graph/Linear_VarNode_Background", FMargin(16.f / 64.f, 12.f / 28.f)));
	//Style->Set("KismetExpression.ReadVariable.Gloss", new BOX_BRUSH("/Graph/Linear_VarNode_Gloss", FMargin(16.f / 64.f, 12.f / 28.f)));
	Style->Set("KismetExpression.ReadAutogeneratedVariable.Body", new BOX_BRUSH("/Graph/Linear_VarNode_Background", FMargin(16.f / 64.f, 12.f / 28.f)));

	Style->Set("PhysicsAssetEditor.Graph.Node.Shadow", new BOX_BRUSH("Graph/RegularNode_shadow", FMargin(18.0f / 64.0f)));

	if (FSlateApplication::IsInitialized())
	{
		FSlateApplication::Get().GetRenderer()->ReloadTextureResources();
	}
}

#pragma endregion

#pragma region MatrixBackground

void FToUIModule::ApplyMatrixBackgroundEditorStyle()
{
	const auto Settings = GetEditorSettings();
	UMaterialInterface* Material;
	if (Settings->MatrixBackgroundMat.IsValid())
	{
		Material = Settings->MatrixBackgroundMat.Get();
	}
	else
	{
		//No Setting ,Set as default
		Material = LoadObject<UMaterialInterface>(nullptr, *Path_MatrixBackgroundDefault);
		if (Material == nullptr) return;
	}
	const auto EditorStyleSetting = GetMutableDefault<UEditorStyleSettings>();
	FSlateBrush Brush;
	Brush.SetResourceObject(Material);
	EditorStyleSetting->GraphBackgroundBrush = Brush;
	EditorStyleSetting->SaveConfig();
}

void FToUIModule::UpdateDragOffset()
{
}


#pragma endregion


bool FToUIModule::Tick(float DeltaTime)
{
	UpdateDragOffset();
	return true;
}

#undef LOCTEXT_NAMESPACE

IMPLEMENT_MODULE(FToUIModule, ToUI)
